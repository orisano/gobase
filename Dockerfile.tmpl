cat << __EOF__
# syntax = docker/dockerfile:1.0-experimental
ARG ALPINE_TAG=3.9
ARG GOLANG_TAG=1.12-alpine\${ALPINE_TAG}

FROM golang:\${GOLANG_TAG} AS vendor
WORKDIR /go/src/${PKG_PATH}
ENV DEP_VERSION 0.5.0
RUN apk add --no-cache git
RUN wget -O /usr/local/bin/dep https://github.com/golang/dep/releases/download/v\${DEP_VERSION}/dep-linux-amd64 && chmod +x /usr/local/bin/dep
COPY Gopkg.lock Gopkg.toml ./
RUN dep ensure -vendor-only && rm -rf /go/pkg/dep/sources

FROM golang:\${GOLANG_TAG} AS build
WORKDIR /go/src/${PKG_PATH}
RUN apk add --no-cache mailcap make
RUN wget -O /usr/local/bin/depinst https://github.com/orisano/depinst/releases/download/1.0.1/depinst-linux-amd64 && chmod +x /usr/local/bin/depinst
ENV TZ=GMT0
RUN apk add --no-cache tzdata \\
    && cp /usr/share/zoneinfo/\${TZ} /etc/localtime \\
    && apk del tzdata
COPY Makefile Gopkg.toml Gopkg.lock ./
COPY --from=vendor /go/src/${PKG_PATH}/vendor ./vendor
COPY . .
RUN --mount=type=cache,target=~/.cache/go-build CGO_ENABLED=0 make build

FROM build AS test
RUN --mount=type=cache,target=~/.cache/go-build make test

FROM alpine:3.9 AS app
ENV GOROOT=/go
RUN apk add --no-cache ca-certificates
COPY --from=build /etc/mime.types /etc/localtime /etc/
COPY --from=build /usr/local/go/lib/time/zoneinfo.zip /go/lib/time/
COPY --from=build /go/src/${PKG_PATH}/bin/${NAME} /bin/
ENTRYPOINT ["/bin/${NAME}"]
__EOF__
